var url = require('url')

var _ = require('lodash')

var http = require('http-debug').http;
var https = require('http-debug').https;
var nurl = require('url');

var birdUtils = require('bird-common/utils')

var forward = function (config, httpOrHttps, urlOptions, req, res, retryMethod, intercept, callback, forwardUrl) {
    var reqChunk;

    // 转发功能的核心, 通过模拟请求发送, 转接所有处理后的请求数据给target server, 并将随后得到的所有信息原样返回给前端
    var forwardRequest = httpOrHttps.request(urlOptions, function (forwardResponse) {
        if (typeof intercept === 'function' && true === intercept(req, forwardRequest, res, forwardResponse)) {
            return;
        }

        var statusCode = forwardResponse.statusCode;

        var needRetry = function () {
            res.end('!!!!MESSAGE from bird!!!! Please refresh your browser... ' +
                'You probably need to make sure the cookie is valid for your login, e.g. copy&paste the cookie from your browser and replace it on your bird config.')
            // res.end()
            birdUtils.logs(
                ['debug', 'Need retry authentication'],
                ['hint', 'You probably need to make sure the cookie is valid for your login, e.g. copy&paste the cookie from your browser and replace it on your bird config.']
            )
            return callback(true)
        }

        // console.log('@debug,', req.hostname)
        // console.log('@debug, ', forwardResponse.location, statusCode)
        // 如果返回不为 200, 则需要进行 <<[ 特殊返回的处理, 如 3XX, 403 ]{t97zs_w0fege8q_iomeynf7}>>
        if (statusCode != 200) {

            birdUtils.log('warn', 'Response status got is : ' + statusCode)

            // 如果是站内redirect, 我们需要把 location 给更换 host 了,
            // 暂不支持 protocol 自动切换
            var location = forwardResponse.headers.location
            var newLocationParsed = false
            if (typeof location == 'string') {
                var newLocationInfo = url.parse(location)
                if (newLocationInfo.host == urlOptions.host && newLocationInfo.port == urlOptions.port) {
                    newLocationParsed = true
                    forwardResponse.headers.location =
                        'http://' + req.hostname + ':' + config.birdPort + newLocationInfo.pathname + (newLocationInfo.query ? '?' + newLocationInfo.query : '')

                }
            }
            //console.log('@debug, ', forwardResponse.headers.location)
        }

        // 如果非站内重定向, 那么很可能是用户验证身份失效, 导致了跳转或 403等, 这时需要手动触发 plugin 的 retry
        // 站内重定向未必就是需要 retry ... 所有retry的确认应该由用户自己来确定, 我们不做something surprising
        // if (!newLocationParsed && (statusCode >= 300 && statusCode < 400) || statusCode == 403 || statusCode == 401 || statusCode == 407) {
        //     return needRetry()
        // }

        res.writeHead(statusCode, forwardResponse.headers);

        var bodyChunks

        forwardResponse.on('data', function (chunk) {
            // bodyChunks.push(chunk)
            bodyChunks = bodyChunks ? Buffer.concat([bodyChunks, chunk]) : Buffer.concat([chunk])
            // body += chunk;
            res.write(chunk);
        });

        var timeoutTimer = setTimeout(function() {

            birdUtils.logs(['error', '访问超时: ' + forwardUrl],
                []);

            res.end()
            forwardRequest.abort()
        }, 8000)

        forwardResponse.on('end', function () {
            var rawBody = bodyChunks
            if (retryMethod(statusCode, rawBody)) {
                return needRetry()
            }
            
            clearTimeout(timeoutTimer)
            res.end();
            try {
                if (config.showXhrData) {
                    reqChunk && birdUtils.logs(['info', '请求: '], ['hint', JSON.parse(reqChunk.toString())])
                    rawBody && birdUtils.logs(['info', '返回: '], ['hint', JSON.parse(rawBody.toString())])
                }
            } catch (e) {
                // console.log('上传数据到platform发生错误')
            }
            callback(false)
        });

        forwardResponse.on('error', function (error) {
            birdUtils.logs(['error', '访问出现问题: ' + forwardUrl],
                ['error', error],
                []);

            clearTimeout(timeoutTimer)
            res.end();
        })
    });

    forwardRequest.on('error', function (e) {
        console.error('problem with request: ' + e.message);
        res.end()
        callback(false)
    });

    req.addListener('data', function (chunk) {
        reqChunk = chunk;
        forwardRequest.write(chunk);
    });

    req.addListener('end', function () {
        forwardRequest.end();
    });
}

module.exports = function (config, hitRouteInfo, server, req, res, next) {
    var serverBase = server.server
    if (/\/$/.exec(serverBase)) {
        serverBase = serverBase.substr(0, serverBase.length - 1)
    }
    
    var headers = _.extend({}, req.headers, hitRouteInfo.route.headers)

    // 需要将 headers 的 host 改好, 否则一些server会傻X
    var serverBaseUrlInfo = url.parse(serverBase)
    var serverPort = serverBaseUrlInfo.port
    headers.host = serverBaseUrlInfo.hostname + (serverPort ? ':' + serverBaseUrlInfo.port : '')
    delete headers['x-requested-with'];

    var queryStr = url.parse(req.url).query;
    var urlOptions = {
        host: serverBaseUrlInfo.hostname,
        port: serverBaseUrlInfo.port,
        path: (
            /\/$/.exec(serverBaseUrlInfo.pathname) ?
                serverBaseUrlInfo.pathname.substr(0, serverBaseUrlInfo.pathname.length - 1)
                : serverBaseUrlInfo.pathname)
        + hitRouteInfo.adjustedPathname + (queryStr ? '?' + url.parse(req.url).query : ''),
        method: req.method,
        headers: headers,
        rejectUnauthorized: false
    }

    var forwardUrl = serverBase + hitRouteInfo.adjustedPathname
    console.info('fowarding', hitRouteInfo.pathname.red, 'to', forwardUrl.cyan);

    var forwardPlugin = server.plugin || 'default'
    if (typeof forwardPlugin == 'string') {
        forwardPlugin = require('../forward-plugins/' + forwardPlugin)
    }

    // headers 注入 cookie，若无 cookie 重新尝试登录
    var isAttemptingLogin = forwardPlugin(false, server, urlOptions)

    var retryMethod = server.retryMethod || function () {
            return false;
        }
    if (typeof retryMethod == 'string') {
        retryMethod = require('../retry-plugins/' + retryMethod)
    }
    // return true -> 拦截成功
    var intercept = server.intercept || function (clientReq, localReq, localRes, remoteRes) {return false;}
    var parsed;
    if (typeof intercept === 'string') {
        parsed = nurl.parse(intercept, true);
        intercept = require('../intercept-plugins/' + parsed.pathname)(parsed.query);
    }
    else if (typeof intercept === 'object') {
        intercept = require('../intercept-plugins/' + intercept.name)(intercept.option);
    }

    var httpOrHttps = serverBaseUrlInfo.protocol === 'http:' ? http : https;

    // 如果需要 retry, 很可能是由于我们需要再次的做用户认证
    forward(config, httpOrHttps, urlOptions, req, res, retryMethod, intercept, function (needRetry) {
        // if (needRetry && server.retry) {
        if (needRetry) {
            birdUtils.log('warn', 'Probably need authentication, so let\'s retry the (auth) plugin.')

            // 单次如果发现正在尝试login, 则忽略这次retry
            if (isAttemptingLogin) return
            forwardPlugin(true, server, urlOptions)
        }
    }, forwardUrl)
}
