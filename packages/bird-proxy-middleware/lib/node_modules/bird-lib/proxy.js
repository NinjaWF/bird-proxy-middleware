var url = require('url')
var utils = require('common/utils')
var birdUtils = require('bird-common/utils')

var configParser = require('bird-common/config-parser')
var routerProcessor = require('bird-lib/routes-processor')
var assetProcessor = require('bird-lib/asset-processor')
var _ = require('lodash')

module.exports = function(config, middlewareName) {

    return function (req, res, next) {

        if (req.url == '/_/bird-tool/relogin') {
            configParser.triggerRelogin()
            res.sendFile(utils.p(__dirname + '/../../pages/relogin.html'))
            return
        }

        var urlParsed = url.parse(req.url);

        var routes = config.routes || [{test: '/', static: '/'}]
        var server = config.servers && config.servers[config.useServer]
        
        var pathname = urlParsed.pathname;

        // 利用 pathname 和 routes 信息来进行 转发/静态文件/假数据 转发
        var hitRouteInfo = routerProcessor.process(routes, pathname)

        if (hitRouteInfo) {
            if (hitRouteInfo.route.static) {
                return assetProcessor.static(config, hitRouteInfo, req, res, next)
            } else if (hitRouteInfo.route.mock) {
                return assetProcessor.mock(config, hitRouteInfo, req, res, next)
            } else {
                if (!server) {
                    birdUtils.logs(
                        ['error', "A reqeust tries to hit the api server, but you didn't set a config for the api server."],
                        ['hint', "The following config `useServer` and `servers` are needed"],
                        ['hint', "You can refer to the `birdfile_example.js`"]
                    )
                    res.writeHeader(500)
                    res.end('The server is not set for api forwarding.')
                    return;
                }
                
                // 不建议，依据路由server配置，更改server
                if (hitRouteInfo.route.server) {
                    server.server = hitRouteInfo.route.server;
                }
                
                return assetProcessor.forward(config, hitRouteInfo, server, req, res, next)
            }
        }

        // 如果没有任何的routes匹配到请求, 我们就交给下一个req handler
        next();
    }
}
