var express = require('express')
var fs = require('fs')
var url = require('url')
var path = require('path')
var request = require('request')
var colors = require('colors');
var cheerio = require('cheerio')

var birdUtils = require('bird-common/utils')


/**
 * get the normalized cookie from jar
 *
 * @param  {Array} cookieArray
 * @return {String} cookie string used in headers
 */
var redeemCookieFromJar = function (cookieArray) {
    var result = '';
    for (var i = 0; i < cookieArray.length; i++) {
        result += cookieArray[i].key + '=' + cookieArray[i].value + ';';
        if (i !== cookieArray.length - 1) {
            result += ' ';
        }
    }
    return result;
}

/**
 * 模拟整个uuap的身份认证过程, 获取所需的cookie
 *
 * @param serverInfo
 */
var mimicUUAPLogin = function (serverInfo) {
    var UUAP_SERVER = serverInfo.uuapServer;

    //保证路径完整
    var TARGET_SERVER = getTargetServerUrl(serverInfo);

    var USERNAME = serverInfo.useUser;
    var PASSWORD = serverInfo.users[serverInfo.useUser];

    var cookieKey = getCookieKey(serverInfo)

    var jar = request.jar()

    loginAttempt[cookieKey] = true

    birdUtils.logs(['debug', 'Sending to get the uuap login form.'])
    // 先想 uuap login page 发起请求, 得到 uuap 登陆所需的各种参数
    request({
        url: UUAP_SERVER,
        jar: jar
    }, function (error, response, body) {

        try {
            // use cheerio to parse dom
            var $ = cheerio.load(body);
        } catch (ex) {
            birdUtils.log('error', 'Failed to parsed the login page html. Please check...')
            birdUtils.log('debug', body)
            return;
        }

        // 得到 uuap login form 的一些信息
        var hiddenInputs = $('#fm1 input[type=hidden]');
        var lt = $(hiddenInputs.get(0)).val();
        var execution = $(hiddenInputs.get(1)).val();
        var type = 1;
        var _eventId = 'submit';
        var rememberMe = 'on';
        var username = USERNAME;
        var password = PASSWORD;

        // console.log('@debug, ', {
        //     username: username,
        //     password: password,
        //     rememberMe: rememberMe,
        //     _eventId: _eventId,
        //     type: type,
        //     execution: execution,
        //     lt: lt
        // })
        // 模拟 uuap 的 login
        request.post({
            url: UUAP_SERVER + '/login',
            form: {
                username: username,
                password: password,
                rememberMe: rememberMe,
                _eventId: _eventId,
                type: type,
                execution: execution,
                lt: lt
            },
            jar: jar
        }, function (error, httpResponse, body) {

            if (error) {
                birdUtils.logs(
                    ['error', "There is some error occurred at the login process. "],
                    ['hint', 'The error as below'],
                    ['hint', error]
                )
            }



            // request the logined uuap again, and let it redirect for us
            // erp feapps need addition routing policy...
            var toUrl;

            if (serverInfo.bprouting) {
                // 如果有手动设置 bprouting 的信息的话, 则生成特殊的连接
                var bproutingUrl = TARGET_SERVER + (typeof serverInfo.bprouting == 'function' ? serverInfo.bprouting() : serverInfo.bprouting)
                toUrl = UUAP_SERVER + '/login?service=' + encodeURIComponent(bproutingUrl)
            } else {
                toUrl = UUAP_SERVER + '/login?service=' + encodeURIComponent(TARGET_SERVER)
            }

            // 模拟 uuap 登陆成功之后的跳转动作
            request({
                url: toUrl,
                jar: jar
            }, function (error, response, body) {
                // do nothing, jar record the session automatically
                // var cookies = jar.getCookies(TARGET_SERVER);
                if (error) {
                    birdUtils.logs(
                        ['error', "There is some error occurred when try to retrieve the login redirection. Please check what happened. "],
                        ['hint', 'The error as below'],
                        ['hint', error],
                        []
                    )
                } else {
                    birdUtils.logs(
                        ['debug', 'The jar gotten for the cookie is : (如果这里是空的, 说明cookie取的有问题)'],
                        ['debug', jar],
                        ['debug', body],
                        []
                    )
                }

                loginAttempt[cookieKey] = false;
                cookies[cookieKey] = jar

                // @debug, 假装session过期, cookie失效, 开发测试bird用
                // setTimeout(function() {
                //     cookies[getCookieKey(serverInfo)] = 'abcd'
                //     console.log('@debug, invalidate the cookie')
                // }, 10000)
            })
        })


    });
}

var getCookieKey = function(serverInfo) {
    return getTargetServerUrl(serverInfo) + '|' + serverInfo.uuapServer + '|' + serverInfo.useUser
}

var getTargetServerUrl = function(serverInfo) {
    return serverInfo.server.slice('-1') === '/' ? serverInfo.server : serverInfo.server + '/'
}


/**
 * cookie string 的缓存
 *
 * @type {{}}
 *  $KEY : cookie string
 *
 *  $KEY = $server + '|' + $uuap_server + '|' + $username
 *
 *  见 getCookieKey
 */
var cookies = {}

/**
 * 用于避免重复产生login的动作, 相同时间段里, 我们只需要做一次login尝试即可
 *
 * @type {{}}
 *  $KEY : 见 cookies 的 $KEY 解释
 */
var loginAttempt = {}

/**
 * uuap的登录方式
 *
 * @param isRetry
 * @param serverInfo
 * @param urlOptions
 * @returns {boolean} 是否在尝试登陆
 */
module.exports = function (isRetry, serverInfo, urlOptions) {
    // 先尝试在我们的历史cookies里找找看有没有可用的cookie
    var cookieKey = getCookieKey(serverInfo)
    var cookie = cookies[cookieKey]

    if (!cookie || isRetry) {
        if (!loginAttempt[cookieKey]) {
            // 如果没有可用的cookie, 或者我们发现需要重新登录, 则重新走一遍 login 的流程获取cookie
            mimicUUAPLogin(serverInfo)
            return true
        }
    } else {
        // 我们现在需要通过 targetUrl 来获取cookie, 而不是简单的去获取 root 下的cookie
        // 因为, cookie 根据path不一样是有不一样的效果的
        var targetUrl = getTargetServerUrl(serverInfo) + (urlOptions.path || '').replace(/^\//, '')

        // 否则, 尝试把cookie写到header中, 供转发流程使用
        var cookieForUrl = cookie.getCookieString(targetUrl);

        urlOptions.headers.cookie = (cookieForUrl ? cookieForUrl + ';' : '')
            + urlOptions.headers.cookie;
        // console.log('@debug, urloptions in uuap', targetUrl, urlOptions)
    }
    return false
}