var express = require('express')
var fs = require('fs')
var url = require('url')
var path = require('path')
var request = require('request')
var colors = require('colors');
var cheerio = require('cheerio')

var birdUtils = require('bird-common/utils')

/**
 * 根据反馈全面完善 UUAP 登陆插件
 */

/**
 * get the normalized cookie from jar
 *
 * @param  {Array} cookieArray
 * @return {String} cookie string used in headers
 */
var redeemCookieFromJar = function (cookieArray) {
    var result = '';
    for (var i = 0; i < cookieArray.length; i++) {
        result += cookieArray[i].key + '=' + cookieArray[i].value + ';';
        if (i !== cookieArray.length - 1) {
            result += ' ';
        }
    }
    return result;
}

/**
 * 模拟整个uuap的身份认证过程, 获取所需的cookie
 *
 * @param serverInfo
 */
var mimicUUAPLogin = function (serverInfo) {

    //保证路径完整
    var TARGET_SERVER = getTargetServerUrl(serverInfo);
    var LOGIN_URL = serverInfo.loginUrl || serverInfo.server

    if (!serverInfo.useUser) {
        birdUtils.logs(['error', '请设置好 SERVER_INFO.useUser'])
        return
    }

    var USERNAME = serverInfo.useUser;

    if (!serverInfo.users) {
        birdUtils.logs(['error', '请设置好 SERVER_INFO.users'])
        return
    }
    if (!(serverInfo.useUser in serverInfo.users)) {
        birdUtils.logs(['error', '请在 SERVER_INFO.users 中为 ' + serverInfo.useUser + ' 设置好密码'])
    }
    var PASSWORD = serverInfo.users[serverInfo.useUser];

    var cookieKey = getCookieKey(serverInfo)

    var jar = request.jar()

    loginAttempt[cookieKey] = true

    var loginEnded = function() {
        delete loginAttempt[cookieKey]
    }

    var tryUUAPLogin = function(body, accessResponse) {
        // 说明可以直接登陆 ???
        try {
            // use cheerio to parse dom
            var $ = cheerio.load(body);
        } catch (ex) {
            birdUtils.log('error', 'Failed to parsed the login page html. Please check...')
            birdUtils.log('debug', body)
            loginEnded()
            return;
        }

        // 得到 uuap login form 的一些信息
        var lt = $('form').first().find('[type=hidden][name=lt]').val()
        var execution =$('form').first().find('[type=hidden][name=execution]').val();
        var type = 1;
        var _eventId = 'submit';
        var rememberMe = 'on';
        var username = USERNAME;
        var password = PASSWORD;
        
        if (!lt && !execution) {
            birdUtils.logs(
                ['warn', '估计 uuap 的样式又有改动了, 得根据具体的 DOM 结构来修改lt&execution的获取方式'],
                []
            )
        }
        var serverBaseUrlInfo = url.parse(TARGET_SERVER)
        if (accessResponse.request.href.indexOf('localhost') !== -1) {
            birdUtils.logs(
                ['warn', '请务必确认将你本地的开发服务器的端口号设置为' + serverBaseUrlInfo.port],
                ['warn', '否则数据转发永远都是 302 (具体原因: 因为后端服务器的uuap回调被设置为 localhost...)'],
                []
            )
        }
        var redirectUrl = accessResponse.request.href.replace('localhost', serverBaseUrlInfo.hostname);
        
        // 模拟 login 登陆
        request.post({
            url: accessResponse.request.href,
            form: {
                username: username,
                password: password,
                rememberMe: rememberMe,
                _eventId: _eventId,
                type: type,
                execution: execution,
                lt: lt
            },
            jar: jar
        }, function (error, _res, body) {
            if (error) {
                birdUtils.logs(
                    ['error', '尝试登陆时, 检测到错误'],
                    ['error', error],
                    ['error', body],
                    [])
                loginEnded()
                return
            }
            // 判断是否登陆账户错误
            if (/id="login-failed-errors/.exec(body)) {
                birdUtils.logs(['error', '登陆信息有误, 请检查用户名和账号密码是否正确'],
                    ['error', body],
                    [])
                loginEnded()
                return
            } else {
                request.get({
                    url: redirectUrl,
                    jar: jar
                }, function(error, redirectResponse, redirectBody) {
                    if (error) {
                        birdUtils.logs(
                            ['error', '登陆后token转发时, 检测到错误'],
                            ['error', error],
                            ['error', body],
                            [])
                        loginEnded()
                        return
                    }

                    var cookieKey = getCookieKey(serverInfo)
                    cookies[cookieKey] = jar

                    birdUtils.logs(
                        ['info', '登陆步骤完成, 请检查 cookie 记录是否正确'],
                        ['info', jar],
                        [])
                    loginEnded()
                })
            }
        })
    }

    request({
        url: LOGIN_URL,
        jar: jar
    }, function(error, response, body) {
        if (error) {
            birdUtils.logs(
                ['error', '初次访问开发服务器时, 检测到错误'],
                ['error', error],
                ['error', body],
                [])
            loginEnded()
            return
        }

        /**
         * 尝试连接使用uuap的服务之后, 一般会有两种情况:
         *
         * - 一种是使用 location.href 来重定向到身份验证的端口
         * 判断 location.href
         *
         * - 另一种是直接发起 302 , 直接会重定向到目标 uuap login page
         * 判断 : name="password"
         *
         * - 注意, 有可能还会有其他的登陆可能
         *
         */
        if (/name="password"/.exec(body)) {
            tryUUAPLogin(body, response)
            return
        } else if (/location\.href/.exec(body)) {
            var match = /location.href\s*=\s*\\?['"]([^\\'"]+)/.exec(body)
            if (match) {
                request({
                    url: match[1],
                    jar: jar
                }, function(error, response, body) {
                    if (error) {
                        birdUtils.logs(
                            ['error', '二次访问开发服务器时, 检测到错误'],
                            ['error', error],
                            ['error', body],
                            [])
                        loginEnded()
                        return
                    }

                    tryUUAPLogin(body, response)
                    return
                })
                return
            }
        }

        loginEnded()
        birdUtils.logs(
            ['error', '无法自动检测登陆的方法, 请确保服务器的url是否正确, 看服务器访问的结果是否正确'],
            ['error', body],
            ['error', '注意!!! url可能应该要包含 context path 如 http://172.12.34.56:8080/p2p 里的 /p2p'],
            ['error', '如果无法自动检测出登陆的初始页面, 你可以根据返回的页面, 推断并设置 SERVER_INFO.loginUrl 来主动指定.'],
            []
        )
    })
}

var getCookieKey = function(serverInfo) {
    return serverInfo.server + '|' + serverInfo.useUser
}

var getTargetServerUrl = function(serverInfo) {
    return serverInfo.server.slice('-1') === '/' ? serverInfo.server : serverInfo.server + '/'
}


/**
 * cookie string 的缓存
 *
 * @type {{}}
 *  $KEY : cookie string
 *
 *  $KEY = $server + '|' + $uuap_server + '|' + $username
 *
 *  见 getCookieKey
 */
var cookies = {}

/**
 * 用于避免重复产生login的动作, 相同时间段里, 我们只需要做一次login尝试即可
 *
 * @type {{}}
 *  $KEY : 见 cookies 的 $KEY 解释
 */
var loginAttempt = {}

/**
 * uuap的登录方式
 *
 * @param isRetry
 * @param serverInfo
 * @param urlOptions
 * @returns {boolean} 是否在尝试登陆
 */
module.exports = function (isRetry, serverInfo, urlOptions) {
    // 先尝试在我们的历史cookies里找找看有没有可用的cookie
    var cookieKey = getCookieKey(serverInfo)
    var cookie = cookies[cookieKey]

    if (!cookie || isRetry) {
        // 如果进入 retry, 则干脆把所有cookie都清除
        if (isRetry) {
            loginAttempt = {}
            cookies = {}
        }

        if (!loginAttempt[cookieKey]) {
            // 如果没有可用的cookie, 或者我们发现需要重新登录, 则重新走一遍 login 的流程获取cookie
            mimicUUAPLogin(serverInfo)
            return true
        }
    } else {
        // 我们现在需要通过 targetUrl 来获取cookie, 而不是简单的去获取 root 下的cookie
        // 因为, cookie 根据path不一样是有不一样的效果的
        var targetUrl = getTargetServerUrl(serverInfo) + (urlOptions.path || '').replace(/^\//, '')

        // 否则, 尝试把cookie写到header中, 供转发流程使用
        var cookieForUrl = cookie.getCookieString(targetUrl);

        urlOptions.headers.cookie = (cookieForUrl ? cookieForUrl + ';' : '')
            + urlOptions.headers.cookie;
        // console.log('@debug, urloptions in uuap', targetUrl, urlOptions)
    }
    return false
}