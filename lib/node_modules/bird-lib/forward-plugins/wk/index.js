let path = require('path')
let fs = require('fs')

var cookies = null

module.exports = function(isRetry, serverInfo, urlOptions) {
    if (!cookies || isRetry) {
        getCookies(serverInfo);
    }
    else {
        urlOptions.headers.cookie = cookies;
    }
}
/**
 * /
 * @param  {[type]} serverInfo [object]
 * {
 *      useUser: 'XXX',
        password: '*****'
 * }
 * @param  {[type]} targetUrl  [for login, usually is server URL]
 * @return {[type]} string     [cookie]
 */
function getCookies(config) {
    let targetUrl = config.loginUrl || config.server
    let serverInfo = {
        useUser: config.useUser,
        password: config.users[config.useUser],
        targetUrl: targetUrl
    }
    // 使用Casper 模拟登录获取cookie
    let targetFile = './casper-getCookies.js'
    console.log('useUser', serverInfo.useUser)
    console.log('password', serverInfo.password)

    let casperFilePath = path.resolve(__dirname, targetFile);

    /**
     * 可配置的定位信息,
     * 这里提供拓展， 方便用户可以自行调整登录信息
     */

    let paramsForCapserJS = {
        targetUrl: serverInfo.targetUrl,

        userName: serverInfo.useUser,
        password: serverInfo.password,

        selUserName: '#username',
        selPassword: '#password',

        selSubmit: '.bt-login.commit',

        selEnterpriseInput: '#eap-sass-selector-input',
        enterpriseInputValue: '',

        selEnterpriseSuggestItem: '.eap-sass-suggestion-item',
        selEnterpriseConfirmBtn: '#eap-sass-selector-submit',

        cookieOutputPrefix: '[cookie]=',
    }

    if (config.extendConfig && config.extendConfig.loginPostionInfo) {
        console.log('[BIRD] 你可以通过 .extend.loginPositionInfo 来进行额外的扩展配置哟, 可配置项如下 : ', paramsForCapserJS);
        paramsForCapserJS = Object.assign({}, paramsForCapserJS, config.extendConfig.loginPostionInfo)
    }


    // 开始读取文件信息
    if (fs.existsSync(casperFilePath)) {
        var casperScriptContent = fs.readFileSync(casperFilePath, 'utf8');

        // 替换当前的 casperjs 脚本中的参数
        casperScriptContent = casperScriptContent.replace('// <PARAMS>', () => {
            return `PARAMS = ${JSON.stringify(paramsForCapserJS)}`;
        });

        // 创建临时文件, 避免源文件被污染
        var tempCasperScriptFile = path.resolve(__dirname, './tmp-casper-getCookies.js')

        // 更新临时文件信息
        fs.writeFileSync(tempCasperScriptFile, casperScriptContent, 'utf8', function (err) {
            if (err) {
                return console.log(err);
            }
        });

        console.log('start getCookie...');
        const {spawn, execFileSync} = require('child_process');
        const cmdCapserScript = spawn('npm', ['run', 'casper', tempCasperScriptFile]);

        cmdCapserScript.stdout.on('data', data => {
            cmdOutputString = data.toString();

            if (cmdOutputString.indexOf(paramsForCapserJS.cookieOutputPrefix) === 0) {
                cookies = cmdOutputString.slice(paramsForCapserJS.cookieOutputPrefix.length).trim();

                if (cookies) {
                    console.log(' ====================== COOKIE ======================= ');
                    console.log(cookies);
                    console.log(' ===================================================== ');
                }
                else {
                    console.log(' ========== 获取 COOKIE 失败 ==========');
                    console.log(cookies);
                    cookies = null;
                }
            }
            else {
                console.log('[BIRD-WK]', cmdOutputString.toString());
            }
        });

        // 删除临时生成的 casper 脚本, 暂时测试一下不用删啦 (理论上好像也不用)
        // cmdCapserScript.on('close', () => {
        //     fs.unlinkSync(tempCasperScriptFile);
        // });
    }
    else {
        console.log('casperFilePath does not exist', casperFilePath);
    }
}

