let path = require('path')
let fs = require('fs')

var cookies = null

module.exports = function(isRetry, serverInfo, urlOptions) {
    if (!cookies || isRetry) {
        cookies = getCookies(serverInfo)
    }
    else {
        urlOptions.headers.cookie = cookies
    }
}
/**
 * /
 * @param  {[type]} serverInfo [object]
 * {
 *      useUser: 'XXX',
        password: '*****'
 * }
 * @param  {[type]} targetUrl  [for login, usually is server URL]
 * @return {[type]} string     [cookie]
 */
function getCookies(config) {
    let targetUrl = config.loginUrl || config.server
    let serverInfo = {
        useUser: config.useUser,
        password: config.users[config.useUser],
        targetUrl: targetUrl
    }
    // 使用Casper 模拟登录获取cookie
    let targetFile = './casper-getCookies.js'
    console.log('useUser', serverInfo.useUser)
    console.log('password', serverInfo.password)

    let casperFilePath = path.resolve(__dirname, targetFile);

    /**
     * 可配置的定位信息,
     * 这里提供拓展， 方便用户可以自行调整登录信息
     */

    let loginPostionInfo = {
        userId: '#username',
        userPassword: '#password',
        submit: '.bt-login.commit'
    }
    if (config.extendConfig && config.extendConfig.loginPostionInfo) {
        loginPostionInfo = Object.assign({}, loginPostionInfo, config.extendConfig.loginPostionInfo)
    }


    // 开始读取文件信息
    if (fs.existsSync(casperFilePath)) {
        var data = fs.readFileSync(casperFilePath, 'utf8');
        // 修改Casper文件中的用户信息
        var replaceData = generateData(data, serverInfo, loginPostionInfo)

        // 创建临时文件, 避免源文件被污染
        var tmpfiles = path.resolve(__dirname, './tmp-casper-getCookies.js')

        // 更新临时文件信息
        fs.writeFileSync(tmpfiles, replaceData, 'utf8', function (err) {
            if (err) {
                return console.log(err);
            }
        });
        // 运行获取cookie脚本
        const {spawn, spawnSync, execFileSync} = require('child_process');
        // var pwd = process.cwd()
        console.log('start getCookie...');
        // const ls = spawnSync('casperjs', [tmpfiles]);
        const ls = spawnSync('npm', ['run', 'casper', tmpfiles]);
        // const ls = spawnSync('PHANTOMJS_EXECUTABLE=./node_modules/.bin/phantomjs', ['./node_modules/.bin/casperjs', tmpfiles])
        let cookie = ls.stdout.toString();
        console.log(cookie)
        // 处理返回结果
        cookie = cookie.substr(cookie.indexOf('cookie=') + 7)
        // 删除临时文件
        fs.unlink(tmpfiles);
        console.log(' ====================== COOKIE ======================= ');
        console.log(cookie.trim())
        console.log(' ===================================================== ');
        if (cookie.trim()) {
            // 解决 cookie 存在空格导致 请求头报错说 cookie 存在非法字符
            return cookie.trim()
        }
        else {
            console.log('获取 cookie 失败')
            return null
        }
    }
    else {
        console.log('casperFilePath is not exist', casperFilePath);
        return null
    }
}


function generateData(data, serverInfo, loginPostionInfo) {
    let tmp = data
    // 替换查询位置的信息， 如用户名输入框的 ID
    tmp = tmp.replace(/\${userId}/g, loginPostionInfo.userId);
    tmp = tmp.replace(/\${userPassword}/g, loginPostionInfo.userPassword);
    tmp = tmp.replace(/\${submit}/g, loginPostionInfo.submit);

    // 替换查询位置处要录入的信息， 如用户名
    tmp = tmp.replace(/\${username}/g, serverInfo.useUser);
    tmp = tmp.replace(/\${password}/g, serverInfo.password);
    tmp = tmp.replace(/\${targetUrl}/g, serverInfo.targetUrl);

    return tmp
}