var nps = require('path');
var fs = require('fs');
var JSONB = require('json-buffer')


function MemStorage(path) {
    this.db = {};
    this.path = path || nps.join(__dirname, 'cache.json');
}

MemStorage.prototype.release = function () {
    delete this.db;
    this.db = {};
};

MemStorage.prototype.get = function (key) {
    return this.db[key];
};

MemStorage.prototype.set = function (key, val) {
    key = key && key.toString() || ''
    this.db[key] = val;
};

MemStorage.prototype.exists = function (key) {
    return (key in this.db)
};

MemStorage.prototype.saveSync = function (path) {
    path = path || this.path;
    fs.writeFileSync(path, JSONB.stringify(this.db), {encoding: 'utf8'});
};

MemStorage.prototype.isEmpty = function () {
    return Object.keys(this.db).length === 0;
}

MemStorage.prototype.loadSync = function (path) {
    path = path || this.path;
    try {
        var string = fs.readFileSync(path, {encoding: 'utf8'});
        this.db = JSONB.parse(string);
    } catch (ex) {

    }
};

MemStorage.prototype.getOrSet = function (key, valOrValGetter) {
    if (this.exists(key)) {
        return this.get(key);
    }

    var data = typeof valOrValGetter === 'function' ? valOrValGetter() : valOrValGetter;
    this.set(key, data);
    return data;
};


module.exports = MemStorage;